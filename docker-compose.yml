services:
  # 服務 1: PostgreSQL 資料庫 (保持不變)
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - "5432"
    healthcheck: # 【建議新增】資料庫健康檢查
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 服務 2: Django 應用程式 (Gunicorn) (基本保持不變)
  web:
    build: .
    image: nick45320639/strawberrydetect:latest
    # command: python manage.py runserver 0.0.0.0:8000 # 開發時用
    volumes:
      - .:/app # 開發時掛載程式碼，生產時建議從映像檔執行
      - static_volume:/app/staticfiles
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      db: # 依賴 db 的健康狀態
        condition: service_healthy 
      redis: # 依賴 redis 的健康狀態 (如果 redis 有 healthcheck)
        condition: service_started # 或者 service_healthy 如果 redis 有 healthcheck
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      # - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
      - CELERY_BROKER_URL=redis://redis:6379/0 # 確保 web 也能知道 broker url
      - CELERY_RESULT_BACKEND=django-db
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}


  # 服務 3: Nginx 反向代理 (保持不變)
  nginx:
    image: nginx:stable-alpine
    ports:
      - "${NGINX_PORT:-8000}:80" # 可以用環境變數設定主機端口，預設8000
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
    depends_on:
      - web

  # 服務 4: Redis (Celery Message Broker) (基本保持不變)
  redis:
    image: redis:7-alpine
    expose: # 通常內部訪問即可，除非您需要從主機直接連
      - "6379"
    ports:
      - "6379:6379" # 如果需要從主機直接訪問 Redis
    volumes:
      - redis_data:/data
    restart: always
    healthcheck: # Redis 健康檢查
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  # 服務 5: Celery Worker (執行背景任務) (基本保持不變)
  celery_worker:
    build: .
    image: nick45320639/strawberrydetect:latest
    command: celery -A detector_project worker -l INFO -Q celery,default # 可以指定監聽的隊列
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db: # 【修改點】依賴 db 的健康狀態
        condition: service_healthy
      redis: # 【修改點】依賴 redis 的健康狀態
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=detector_project.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=django-db
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}

  # --- Celery Beat (排程任務觸發器) ---
  celery_beat:
    build: . # 與 web, celery_worker 使用相同的 Dockerfile
    image: nick45320639/strawberrydetect:latest # 使用相同的映像檔
    command: celery -A detector_project beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app # 開發時掛載程式碼，生產時建議從映像檔執行
      # Celery Beat 會在專案根目錄產生一個 celerybeat-schedule.db 檔案 (如果不用 DatabaseScheduler)
      # 但因為我們用了 DatabaseScheduler，這個檔案就不那麼重要了，排程存在資料庫。
      # 如果 scheduler 不是 DatabaseScheduler，則需要掛載一個 volume 來持久化排程狀態檔：
      # - celery_beat_schedule:/app/celerybeat-schedule 
    env_file:
      - .env
    depends_on:
      db: # 【修改點】依賴 db 的健康狀態
        condition: service_healthy
      redis: # 【修改點】依賴 redis 的健康狀態
        condition: service_healthy
      # celery_worker: # Beat 通常不需要依賴 worker，它可以獨立發送任務到 broker
      #   condition: service_started
    environment:
      - DJANGO_SETTINGS_MODULE=detector_project.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=django-db # Beat 本身不直接用 result backend，但保持一致
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG} # Beat 通常不需要 DEBUG=1
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
      # AWS 金鑰通常不需要給 Beat，除非 Beat 任務本身直接操作 S3
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}

volumes:
  postgres_data:
  static_volume:
  redis_data:
  # celery_beat_schedule: # 如果 scheduler 不是 DatabaseScheduler 才需要